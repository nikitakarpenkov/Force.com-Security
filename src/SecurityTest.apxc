@isTest
public class SecurityTest {
    /*
    private class TestUser {
        
        public String hash { get; set; }
        public String salt { get; set; }
        
    }
    */
    @isTest
    static void completeTest() {
        
        // Generate and save hash + salt
        String password = 'qwerty';
        Security.HashedPassword newHashedPassword = new Security.HashedPassword(password);
        
        String userSalt = newHashedPassword.salt.toString();
        String userHash = newHashedPassword.hash.toString();
        
        // Retreive hash + salt from database
        Security.HashedPassword retreivedHashedPassword = new Security.HashedPassword(new Security.Hash(userHash), new Security.Salt(userSalt));
        
        // Validate wrong password
        String wrongPassword = 'password';
        System.assert(!retreivedHashedPassword.equals(wrongPassword));
        
        // Validate correct password
        System.assert(retreivedHashedPassword.equals(password));
        
    }
    
    @isTest
    static void hashEqualsTest() {
        
        String hashString = 'testHash0123456789';
        Security.Hash hashFoo = new Security.Hash(hashString);
        Security.Hash hashBar = new Security.Hash(hashString);
        System.assertEquals(hashFoo, hashBar);
        
    }
    
    @isTest
    static void saltEqualsTest() {
        
        String saltString = 'testSalt0123456789';
        Security.Salt saltFoo = new Security.Salt(saltString);
        Security.Salt saltBar = new Security.Salt(saltString);
        System.assertEquals(saltFoo, saltBar);
        
    }
    
    @isTest
    static void SessionTokenTest() {
        
        // Create reset password token
        String privateKeyBase64 = 'JnrKGpIKC8NTADJGmIs6giCKG5AgFbbe007x+TgkhOs=';
        Security.SessionToken sessionToken = new Security.SessionToken('test@test.com', 43200);
        Security.Token token = sessionToken.getToken(privateKeyBase64);
        String tokenString = token.toString();
        
        // Decode and validate token
        Security.SessionToken retreivedResetToken = new Security.SessionToken(tokenString, privateKeyBase64);
        System.assertEquals(sessionToken.key, retreivedResetToken.key);
        System.assertEquals(sessionToken.validThrough, retreivedResetToken.validThrough);
        System.assertEquals(sessionToken.saltString, retreivedResetToken.saltString);
        System.assert(!retreivedResetToken.isValid('someoneelse@test.com'));
        System.assert(retreivedResetToken.isValid('test@test.com'));
        
    }
    
}